datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Draft{
    id String @id @default(cuid())
    name String 
    content Json
    user_id String
    user User @relation(fields: [user_id], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
}

model Topic {
    name  String @id @unique
    users User[]
    blogs Blog[]
    books Book[]
}

model User {
    id              String    @id
    blogs           Blog[]
    saved_blog      Blog[]    @relation("SavedBlog")
    reading_history Blog[]    @relation("ReadingHistory")
    topics          Topic[]
    followers       User[]    @relation("UserFollows")
    following       User[]    @relation("UserFollows")
    createdBooks   Book[]      @relation("BookCreate")
    followingBooks  Book[]    @relation("BookFollows")
    chapters        Chapter[]
    comments        Comment[]
    likes           Like[]
    drafts          Draft[]
}


model Comment {
    id      String @id @default(cuid())
    content String
    user_id String
    user    User   @relation(fields: [user_id], references: [id])
    reply_id String?
    reply    Comment? @relation("Reply", fields: [reply_id], references: [id], onDelete: Cascade)
    replies  Comment[] @relation("Reply")
    blog_id String
    blog    Blog   @relation(fields: [blog_id], references: [id])
}

model Like {
    user_id String
    user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
    blog_id String
    blog    Blog   @relation(fields: [blog_id], references: [id], onDelete: Cascade)
    @@id([user_id, blog_id])
}
model Blog {
    id          String    @id @default(cuid())
    content     Json
    title       String
    coverImage  String?
    description String
    createdAt   DateTime  @default(now())
    user_id     String
    user        User      @relation(fields: [user_id], references: [id])
    savedBy     User[]    @relation("SavedBlog")
    readedBy    User[]    @relation("ReadingHistory")
    comments    Comment[]
    topics      Topic[]
    like        Like[]
    chapters    Chapter[]
}

model Book{
    id String @id @default(cuid())
    title String
    description String
    topic_name String
    topic Topic @relation(fields: [topic_name], references: [name])
    author_id String
    author User @relation("BookCreate", fields: [author_id], references: [id], onDelete: Cascade)
    coverImage String?
    textDark Boolean @default(false)
    followers User[] @relation("BookFollows")
    chapters BookChapter[] 
    books BookInclude[] @relation("ParentBook")
    partOfBook BookInclude[] @relation("ChildBook")
    @@unique([title, author_id])
}

model BookInclude{
    id String @id @default(cuid())
    book_id String
    book Book @relation("ParentBook",fields: [book_id], references: [id], onDelete: Cascade)
    child_id String
    child Book @relation("ChildBook",fields: [child_id], references: [id], onDelete: Cascade)
    child_number Int
    @@unique([book_id, child_id])
}

model Chapter{
    id String @id @default(cuid())
    title String
    blogs Blog[]
    user_id String
    user User @relation(fields: [user_id], references: [id])
    book BookChapter[]
}

model BookChapter{
    id String @id @default(cuid())
    book_id String
    book Book @relation(fields: [book_id], references: [id], onDelete: Cascade)
    chapter_id String
    chapter Chapter @relation(fields: [chapter_id], references: [id], onDelete: Cascade)
    chapter_number Int
    @@unique([book_id, chapter_id])
}